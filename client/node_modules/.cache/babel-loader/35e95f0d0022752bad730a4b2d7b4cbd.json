{"ast":null,"code":"var _jsxFileName = \"/Users/jieli/Desktop/reactblog/client/src/dashboard/NewPost.js\";\nimport React, { useState } from 'react';\nimport MdEditor from 'react-markdown-editor-lite';\nimport MarkdownIt from 'markdown-it';\nimport 'react-markdown-editor-lite/lib/index.css';\n\nconst NewPost = () => {\n  const [markdown, setMarkdown] = useState(\"\");\n  const mdParser = new MarkdownIt({\n    html: true,\n    linkify: true,\n    typographer: true,\n    highlight: function (str, lang) {\n      if (lang && hljs.getLanguage(lang)) {\n        try {\n          return hljs.highlight(lang, str).value;\n        } catch (__) {}\n      }\n\n      return '';\n    }\n  }).use(emoji).use(subscript).use(superscript).use(footnote).use(deflist).use(abbreviation).use(insert).use(mark).use(tasklists, {\n    enabled: this.taskLists\n  });\n\n  const handleEditorChange = ({\n    html,\n    text\n  }) => {\n    setMarkdown(text);\n  };\n\n  return /*#__PURE__*/React.createElement(MdEditor, {\n    style: {\n      height: '100%'\n    },\n    renderHTML: text => mdParser.render(text),\n    value: markdown,\n    onChange: handleEditorChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  });\n};\n\nexport default NewPost;","map":{"version":3,"sources":["/Users/jieli/Desktop/reactblog/client/src/dashboard/NewPost.js"],"names":["React","useState","MdEditor","MarkdownIt","NewPost","markdown","setMarkdown","mdParser","html","linkify","typographer","highlight","str","lang","hljs","getLanguage","value","__","use","emoji","subscript","superscript","footnote","deflist","abbreviation","insert","mark","tasklists","enabled","taskLists","handleEditorChange","text","height","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAO,0CAAP;;AAGA,MAAMC,OAAO,GAAG,MAAM;AAClB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,EAAD,CAAxC;AAEA,QAAMM,QAAQ,GAAG,IAAIJ,UAAJ,CAAe;AAC5BK,IAAAA,IAAI,EAAE,IADsB;AAE5BC,IAAAA,OAAO,EAAE,IAFmB;AAG5BC,IAAAA,WAAW,EAAE,IAHe;AAI5BC,IAAAA,SAAS,EAAE,UAAUC,GAAV,EAAeC,IAAf,EAAqB;AAC5B,UAAIA,IAAI,IAAIC,IAAI,CAACC,WAAL,CAAiBF,IAAjB,CAAZ,EAAoC;AAChC,YAAI;AACA,iBAAOC,IAAI,CAACH,SAAL,CAAeE,IAAf,EAAqBD,GAArB,EAA0BI,KAAjC;AACH,SAFD,CAEE,OAAOC,EAAP,EAAW,CAEZ;AACJ;;AACD,aAAO,EAAP;AACH;AAb2B,GAAf,EAcdC,GAdc,CAcVC,KAdU,EAcHD,GAdG,CAcCE,SAdD,EAeZF,GAfY,CAeRG,WAfQ,EAgBZH,GAhBY,CAgBRI,QAhBQ,EAiBZJ,GAjBY,CAiBRK,OAjBQ,EAkBZL,GAlBY,CAkBRM,YAlBQ,EAmBZN,GAnBY,CAmBRO,MAnBQ,EAoBZP,GApBY,CAoBRQ,IApBQ,EAqBZR,GArBY,CAqBRS,SArBQ,EAqBG;AAAEC,IAAAA,OAAO,EAAE,KAAKC;AAAhB,GArBH,CAAjB;;AAsBA,QAAMC,kBAAkB,GAAG,CAAC;AAAEtB,IAAAA,IAAF;AAAQuB,IAAAA;AAAR,GAAD,KAAoB;AAC3CzB,IAAAA,WAAW,CAACyB,IAAD,CAAX;AACH,GAFD;;AAGA,sBAEI,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAjB;AACI,IAAA,UAAU,EAAGD,IAAD,IAAUxB,QAAQ,CAAC0B,MAAT,CAAgBF,IAAhB,CAD1B;AAEI,IAAA,KAAK,EAAE1B,QAFX;AAEqB,IAAA,QAAQ,EAAEyB,kBAF/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ;AAQH,CApCD;;AAsCA,eAAe1B,OAAf","sourcesContent":["import React, { useState } from 'react'\nimport MdEditor from 'react-markdown-editor-lite';\nimport MarkdownIt from 'markdown-it';\nimport 'react-markdown-editor-lite/lib/index.css';\n\n\nconst NewPost = () => {\n    const [markdown, setMarkdown] = useState(\"\")\n\n    const mdParser = new MarkdownIt({\n        html: true,\n        linkify: true,\n        typographer: true,\n        highlight: function (str, lang) {\n            if (lang && hljs.getLanguage(lang)) {\n                try {\n                    return hljs.highlight(lang, str).value\n                } catch (__) {\n\n                }\n            }\n            return '';\n        }\n    }).use(emoji).use(subscript)\n        .use(superscript)\n        .use(footnote)\n        .use(deflist)\n        .use(abbreviation)\n        .use(insert)\n        .use(mark)\n        .use(tasklists, { enabled: this.taskLists });\n    const handleEditorChange = ({ html, text }) => {\n        setMarkdown(text)\n    }\n    return (\n\n        <MdEditor style={{ height: '100%' }}\n            renderHTML={(text) => mdParser.render(text)}\n            value={markdown} onChange={handleEditorChange\n            } />\n\n    )\n}\n\nexport default NewPost\n"]},"metadata":{},"sourceType":"module"}