{"ast":null,"code":"// TODO why is `this` in use at all?\nvar self = this;\n\n(function () {\n  \"use strict\";\n  /* node-highlight is based on highlight.js (see vendor/highlight.js)       */\n\n  /* usage: html = require(\"highlight\").Highlight(code_string);              */\n\n  /* NB! You also need to include a CSS file from vendor/highlight.js/styles */\n  // load syntax highlighter\n  // TODO create private instances of highlighter \n  // (with fewer langs) for greater accuracy\n\n  var Highlight = module.exports,\n      fs = require('fs'),\n      hljs = require('./vendor/highlight.js/highlight').hljs,\n      langRelPath = \"vendor/highlight.js/languages/\",\n      langPath = __dirname + \"/\" + langRelPath,\n      reEndsWithJs = /\\.js$/i,\n      loadedMap = {},\n      availableMap = {}; // TODO this should move to init in a newer api\n\n\n  Highlight.loadedLanguages = [];\n\n  function acceptJsFiles(lang) {\n    if (lang.match(reEndsWithJs)) {\n      return true;\n    }\n  }\n\n  function preRequireModules(lang, i, arr) {\n    arr[i] = lang = lang.replace(reEndsWithJs, '');\n\n    try {\n      availableMap[lang] = require('./' + langRelPath + lang);\n    } catch (e) {\n      console.error(\"[ERROR] could not preload language pack for '\" + lang + \"'\");\n      console.error(e.message);\n      console.error(e.stack);\n      return;\n    }\n  } // find languages from list of fsnodes\n\n\n  function preloadLanguages(err, fsnodes) {\n    if (err) {\n      console.error(\"[ERROR] langPath '\" + langPath + \"'\");\n      console.error(err.message);\n      console.error(err.stack);\n      return;\n    }\n\n    Highlight.languages = fsnodes.filter(acceptJsFiles).sort(function (a, b) {\n      // xml must be first (others depend on it)\n      if ('xml' === a) {\n        return -100000000;\n      } // django should be after xml\n\n\n      if ('django.js' === a) {\n        return 1000000000;\n      }\n\n      if (a === b) {\n        return 0;\n      }\n\n      if (a < b) {\n        return -1;\n      } else if (a > b) {\n        return 1;\n      } else {\n        // NaN vs string\n        return 0;\n      }\n    });\n    Highlight.languages.forEach(preRequireModules);\n  }\n\n  function loadLangs(cb, langs) {\n    var err;\n\n    if ('string' === typeof langs) {\n      langs = [langs];\n    }\n\n    if (!Array.isArray(langs)) {\n      cb(new Error(\"no array of languages given\"));\n      return;\n    }\n\n    langs.some(function (lang) {\n      var addLangToHighlightInstance;\n\n      if (loadedMap[lang]) {\n        return;\n      }\n\n      addLangToHighlightInstance = availableMap[lang];\n\n      if (!addLangToHighlightInstance) {\n        err = new Error(\"No language pack available for '\" + lang + \"'\");\n        return true;\n      }\n\n      try {\n        addLangToHighlightInstance(hljs);\n      } catch (e) {\n        // TODO fix django and html-xml\n        console.warn('[WARN] failed to load', lang);\n        console.warn(e.message);\n        console.warn(e.stack);\n        Highlight.languages = Highlight.languages.filter(function (l) {\n          return l !== lang;\n        });\n        return;\n      }\n\n      loadedMap[lang] = true;\n      Highlight.loadedLanguages.push(lang);\n    }); // future-proofing for async api\n\n    cb(err);\n  }\n\n  function init(cb, langs, opts) {\n    if (!Array.isArray(langs)) {\n      langs = Highlight.languages.slice();\n    }\n\n    loadLangs(cb, langs);\n  }\n  /**\n   * highlight(text, tabReplace, useCodeBlocks) -> HTML\n   * - text (String): text to be highlighted\n   * - tabReplace (String): defaults to 4 spaces if none, replaces \\t chars\n   * - useCodeBlocks (Boolean): If TRUE use only text between <code> and </code>\n   *\n   * Highlights program code inside a string by setting appropriate CSS class\n   * elements.\n   **/\n\n\n  function highlight(text, tabReplace, useCodeBlocks) {\n    tabReplace = tabReplace || '    ';\n    text = text.replace(/\\r\\n|\\r|\\n/g, '\\n'); // remove \\r\n\n    if (!!useCodeBlocks) {\n      // JS regexpes have some multiline issues, so we temporarily remove them\n      return text.replace(/\\n/g, '\\uffff').replace(/<code([^>]*)>(.*?)<\\/code>/gm, function (original, attrs, source) {\n        return '<code' + attrs + '>' + hljs.highlightText(source.replace(/\\uffff/g, \"\\n\"), tabReplace) + '</code>';\n      }).replace(/&amp;(\\w+;)/g, '&$1').replace(/\\uffff/g, \"\\n\");\n    } else {\n      return hljs.highlightText(text, tabReplace);\n    }\n  } //fs.readdir(langPath, preloadLanguages);\n  // using readdirSync To avoid API Change\n\n\n  preloadLanguages(null, fs.readdirSync(langPath));\n  Highlight.init = init;\n  Highlight.highlight = highlight; // Maintain current api:\n  // TODO why is `this` in use at all?\n\n  function backwardsCompat() {\n    // currently synchronous\n    Highlight.init(function () {}, ['php']);\n    return Highlight.highlight.apply(null, arguments);\n  }\n\n  Highlight.Highlight = self.Highlight = backwardsCompat;\n})();","map":{"version":3,"sources":["/Users/jieli/Desktop/reactblog/client/node_modules/highlight/lib/highlight.js"],"names":["self","Highlight","module","exports","fs","require","hljs","langRelPath","langPath","__dirname","reEndsWithJs","loadedMap","availableMap","loadedLanguages","acceptJsFiles","lang","match","preRequireModules","i","arr","replace","e","console","error","message","stack","preloadLanguages","err","fsnodes","languages","filter","sort","a","b","forEach","loadLangs","cb","langs","Array","isArray","Error","some","addLangToHighlightInstance","warn","l","push","init","opts","slice","highlight","text","tabReplace","useCodeBlocks","original","attrs","source","highlightText","readdirSync","backwardsCompat","apply","arguments"],"mappings":"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","sourcesContent":["// TODO why is `this` in use at all?\nvar self = this;\n\n(function () {\n  \"use strict\";\n  /* node-highlight is based on highlight.js (see vendor/highlight.js)       */\n  /* usage: html = require(\"highlight\").Highlight(code_string);              */\n  /* NB! You also need to include a CSS file from vendor/highlight.js/styles */\n\n  // load syntax highlighter\n  // TODO create private instances of highlighter \n  // (with fewer langs) for greater accuracy\n  var Highlight = module.exports\n    , fs = require('fs')\n    , hljs = require('./vendor/highlight.js/highlight').hljs\n    , langRelPath = \"vendor/highlight.js/languages/\"\n    , langPath = __dirname + \"/\" + langRelPath\n    , reEndsWithJs = /\\.js$/i\n    , loadedMap = {}\n    , availableMap = {}\n    ;\n\n  // TODO this should move to init in a newer api\n  Highlight.loadedLanguages = [];\n\n  function acceptJsFiles(lang) {\n    if (lang.match(reEndsWithJs)) {\n      return true;\n    }\n  }\n\n  function preRequireModules(lang, i, arr) {\n    arr[i] = lang = lang.replace(reEndsWithJs, '');\n\n    try {\n      availableMap[lang] = require('./' + langRelPath + lang);\n    } catch(e) {\n      console.error(\"[ERROR] could not preload language pack for '\" + lang + \"'\");\n      console.error(e.message);\n      console.error(e.stack);\n      return;\n    }\n  }\n\n  // find languages from list of fsnodes\n  function preloadLanguages(err, fsnodes) {\n\n    if (err) {\n      console.error(\"[ERROR] langPath '\" + langPath + \"'\");\n      console.error(err.message);\n      console.error(err.stack);\n      return;\n    }\n\n    Highlight.languages = fsnodes.filter(acceptJsFiles).sort(function (a, b) {\n      // xml must be first (others depend on it)\n      if ('xml' === a) {\n        return -100000000;\n      }\n      // django should be after xml\n      if ('django.js' === a) {\n        return 1000000000;\n      }\n      \n      if (a === b) {\n        return 0;\n      }\n\n      if (a < b) {\n        return -1;\n      } else if (a > b) {\n        return 1;\n      } else {\n        // NaN vs string\n        return 0;\n      }\n    });\n    Highlight.languages.forEach(preRequireModules);\n  }\n\n  function loadLangs(cb, langs) {\n    var err\n      ;\n\n    if ('string' === typeof langs) {\n      langs = [langs];\n    }\n\n    if (!Array.isArray(langs)) {\n      cb(new Error(\"no array of languages given\"));\n      return;\n    }\n\n    langs.some(function (lang) {\n      var addLangToHighlightInstance\n        ;\n\n      if (loadedMap[lang]) {\n        return;\n      }\n\n      addLangToHighlightInstance = availableMap[lang];\n\n      if (!addLangToHighlightInstance) {\n        err = new Error(\"No language pack available for '\" + lang + \"'\");\n        return true;\n      }\n\n      try {\n        addLangToHighlightInstance(hljs);\n      } catch(e) {\n        // TODO fix django and html-xml\n        console.warn('[WARN] failed to load', lang);\n        console.warn(e.message);\n        console.warn(e.stack);\n        Highlight.languages = Highlight.languages.filter(function (l) {\n          return l !== lang;\n        });\n        return;\n      }\n\n      loadedMap[lang] = true;\n      Highlight.loadedLanguages.push(lang);\n    });\n\n    // future-proofing for async api\n    cb(err);\n  }\n\n  function init(cb, langs, opts) {\n    if (!Array.isArray(langs)) {\n      langs = Highlight.languages.slice();\n    }\n\n    loadLangs(cb, langs);\n  }\n\n  /**\n   * highlight(text, tabReplace, useCodeBlocks) -> HTML\n   * - text (String): text to be highlighted\n   * - tabReplace (String): defaults to 4 spaces if none, replaces \\t chars\n   * - useCodeBlocks (Boolean): If TRUE use only text between <code> and </code>\n   *\n   * Highlights program code inside a string by setting appropriate CSS class\n   * elements.\n   **/\n  function highlight(text, tabReplace, useCodeBlocks){\n    tabReplace = tabReplace || '    ';\n    text = text.replace(/\\r\\n|\\r|\\n/g, '\\n'); // remove \\r\n    if (!!useCodeBlocks) {\n      // JS regexpes have some multiline issues, so we temporarily remove them\n      return text\n        .replace(/\\n/g,'\\uffff')\n        .replace(/<code([^>]*)>(.*?)<\\/code>/gm, function(original, attrs, source){\n          return '<code'+attrs+'>'+hljs.highlightText(source.replace(/\\uffff/g,\"\\n\"), tabReplace)+'</code>';\n        })\n        .replace(/&amp;(\\w+;)/g,'&$1').replace(/\\uffff/g,\"\\n\");\n    } else {\n      return hljs.highlightText(text, tabReplace);\n    }\n  }\n\n  //fs.readdir(langPath, preloadLanguages);\n  // using readdirSync To avoid API Change\n  preloadLanguages(null, fs.readdirSync(langPath));\n\n  Highlight.init = init;\n  Highlight.highlight = highlight;\n\n  // Maintain current api:\n  // TODO why is `this` in use at all?\n  function backwardsCompat() {\n    // currently synchronous\n    Highlight.init(function () {}, ['php']);\n    return Highlight.highlight.apply(null, arguments);\n  }\n  Highlight.Highlight = self.Highlight = backwardsCompat;\n}());\n"]},"metadata":{},"sourceType":"script"}