{"ast":null,"code":"var _jsxFileName = \"/Users/jieli/Desktop/reactblog/client/src/dashboard/Dashboard.js\";\nimport React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { getPosts } from '../actions/blog';\nimport PropTypes from 'prop-types';\nimport UpdateIcon from '@material-ui/icons/Update';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport { connect } from \"react-redux\";\nimport { Paper, Table, TableHead, TableRow, TableCell, TableBody, TablePagination, Button } from '@material-ui/core';\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    height: '800px',\n    display: 'flex',\n    overflow: 'auto',\n    flexDirection: 'column'\n  }\n}));\n\nconst Dashboard = ({\n  getPosts,\n  blog\n}) => {\n  const classes = useStyles();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(8);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(parseInt(event.target.value, 8));\n    setPage(0);\n  };\n\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, blog.posts.length - page * rowsPerPage);\n  useEffect(() => {\n    getPosts();\n  }, []);\n  return /*#__PURE__*/React.createElement(Paper, {\n    className: classes.paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, \"Id\"), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, \"Title\"), /*#__PURE__*/React.createElement(TableCell, {\n    style: {\n      maxWidth: '250px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, \"Description\"), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, \"Date\"), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, \"Status\"))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, blog.posts.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((post, index) => /*#__PURE__*/React.createElement(TableRow, {\n    key: JSON.stringify(post.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }, post.id), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  }, post.title), /*#__PURE__*/React.createElement(TableCell, {\n    style: {\n      maxWidth: '250px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  }, post.description), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }, post.created), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  }, post.status), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(UpdateIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 42\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 56\n    }\n  }, 'Update'), \" \"), /*#__PURE__*/React.createElement(TableCell, {\n    align: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 42\n    }\n  }, \"Remove\")))))), /*#__PURE__*/React.createElement(TablePagination, {\n    rowsPerPageOptions: [5, 8],\n    component: \"div\",\n    count: blog.posts.length,\n    rowsPerPage: rowsPerPage,\n    page: page,\n    onChangePage: handleChangePage,\n    onChangeRowsPerPage: handleChangeRowsPerPage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }));\n};\n\nDashboard.propTypes = {\n  getPosts: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  blog: state.blog\n});\n\nexport default connect(mapStateToProps, {\n  getPosts\n})(Dashboard);","map":{"version":3,"sources":["/Users/jieli/Desktop/reactblog/client/src/dashboard/Dashboard.js"],"names":["React","useEffect","makeStyles","getPosts","PropTypes","UpdateIcon","RemoveIcon","connect","Paper","Table","TableHead","TableRow","TableCell","TableBody","TablePagination","Button","useStyles","theme","paper","height","display","overflow","flexDirection","Dashboard","blog","classes","page","setPage","useState","rowsPerPage","setRowsPerPage","handleChangePage","event","newPage","handleChangeRowsPerPage","parseInt","target","value","emptyRows","Math","min","posts","length","maxWidth","slice","map","post","index","JSON","stringify","id","title","description","created","status","propTypes","func","isRequired","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { getPosts } from '../actions/blog';\nimport PropTypes from 'prop-types';\nimport UpdateIcon from '@material-ui/icons/Update';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport { connect } from \"react-redux\";\nimport { Paper, Table, TableHead, TableRow, TableCell, TableBody, TablePagination, Button } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    height: '800px',\n    display: 'flex',\n    overflow: 'auto',\n    flexDirection: 'column',\n  }\n}));\n\n\nconst Dashboard = ({ getPosts, blog }) => {\n\n  const classes = useStyles();\n\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(8);\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(parseInt(event.target.value, 8));\n    setPage(0);\n  };\n  const emptyRows =\n    rowsPerPage - Math.min(rowsPerPage, blog.posts.length - page * rowsPerPage);\n\n\n  useEffect(() => {\n    getPosts()\n  }, [])\n  return (\n    <Paper className={classes.paper}>\n\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>Id</TableCell>\n            <TableCell>Title</TableCell>\n            <TableCell style={{ maxWidth: '250px' }}>Description</TableCell>\n            <TableCell align=\"right\">Date</TableCell>\n            <TableCell align=\"right\">Status</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {blog.posts.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n            .map((post, index) => (\n              <TableRow key={JSON.stringify(post.id)}>\n                <TableCell>{post.id}</TableCell>\n                <TableCell>{post.title}</TableCell>\n                <TableCell style={{ maxWidth: '250px' }}>{post.description}</TableCell>\n                <TableCell align=\"right\">{post.created}</TableCell>\n                <TableCell align=\"right\">{post.status}</TableCell>\n                <TableCell align=\"right\"><UpdateIcon /><Button color=\"primary\">{'Update'}</Button> </TableCell>\n                <TableCell align=\"right\"><Button color=\"secondary\">Remove</Button></TableCell>\n              </TableRow>\n            ))\n          }\n        </TableBody>\n      </Table>\n\n      <TablePagination\n        rowsPerPageOptions={[5, 8]}\n        component=\"div\"\n        count={blog.posts.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onChangePage={handleChangePage}\n        onChangeRowsPerPage={handleChangeRowsPerPage}\n      />\n    </Paper>\n  );\n}\n\nDashboard.propTypes = {\n  getPosts: PropTypes.func.isRequired\n}\nconst mapStateToProps = state => ({\n  blog: state.blog\n})\nexport default connect(mapStateToProps, { getPosts })(Dashboard);\n"]},"metadata":{},"sourceType":"module"}